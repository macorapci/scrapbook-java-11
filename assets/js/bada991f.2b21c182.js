"use strict";(self.webpackChunkscrapbook_java_11=self.webpackChunkscrapbook_java_11||[]).push([[8198],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(k,r(r({ref:t},u),{},{components:n})):a.createElement(k,r({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8006:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const l={id:"chapter-004-id",title:"Chapter 4"},r=void 0,o={unversionedId:"notes/chapter-004-id",id:"notes/chapter-004-id",title:"Chapter 4",description:"If",source:"@site/docs/notes/notes-chapter-004.md",sourceDirName:"notes",slug:"/notes/chapter-004-id",permalink:"/scrapbook-java-11/docs/notes/chapter-004-id",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/notes/notes-chapter-004.md",tags:[],version:"current",frontMatter:{id:"chapter-004-id",title:"Chapter 4"},sidebar:"java11",previous:{title:"Chapter 3",permalink:"/scrapbook-java-11/docs/notes/chapter-003-id"}},s={},p=[{value:"If",id:"if",level:2},{value:"Unreachable Statement",id:"unreachable-statement",level:3},{value:"Switch",id:"switch",level:2},{value:"Case Bitwise Opearation",id:"case-bitwise-opearation",level:3},{value:"Switch Data Types",id:"switch-data-types",level:3},{value:"Default",id:"default",level:3},{value:"Case",id:"case",level:3},{value:"Promotion",id:"promotion",level:3},{value:"For",id:"for",level:2},{value:"Multiple Statement",id:"multiple-statement",level:3},{value:"Infinite Loop",id:"infinite-loop",level:3},{value:"ForEach",id:"foreach",level:2},{value:"Do-While",id:"do-while",level:2},{value:"Optional Labels",id:"optional-labels",level:2},{value:"Unreachable Statement",id:"unreachable-statement-1",level:2},{value:"Focus!",id:"focus",level:2},{value:"Nested If Statement without block",id:"nested-if-statement-without-block",level:3},{value:"Warning",id:"warning",level:3},{value:"Switch Case Condition",id:"switch-case-condition",level:3},{value:"Multiple Initilize",id:"multiple-initilize",level:3},{value:"Warning",id:"warning-1",level:3},{value:"Assignment Operations Return Value in <code>while</code>",id:"assignment-operations-return-value-in-while",level:3},{value:"While Statement can&#39;t Reach While Body&#39;s value",id:"while-statement-cant-reach-while-bodys-value",level:3},{value:"Optional Label can&#39;t use outside of declerated label block",id:"optional-label-cant-use-outside-of-declerated-label-block",level:3},{value:"Assignment Operations Return Value in <code>if</code>",id:"assignment-operations-return-value-in-if",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"if"},"If"),(0,i.kt)("h3",{id:"unreachable-statement"},"Unreachable Statement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\nif(value < 15) {\n    System.out.println("AAAA");\n} else if(value < 11) { // Compiles but this statement is unreacable!\n    System.out.println("BBBB");\n} else {\n    System.out.println("CCCC");\n}\n\n')),(0,i.kt)("h2",{id:"switch"},"Switch"),(0,i.kt)("h3",{id:"case-bitwise-opearation"},"Case Bitwise Opearation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\nint value = 3;\nswitch (value) {\n    case 1:\n        System.out.println("1111");\n    case 1 | 2:\n        System.out.println("2222"); // 1 | 2 operations is 3 so it will print 2222!\n}\n\n')),(0,i.kt)("h3",{id:"switch-data-types"},"Switch Data Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"byte and Byte"),(0,i.kt)("li",{parentName:"ul"},"short and Short"),(0,i.kt)("li",{parentName:"ul"},"char and Character"),(0,i.kt)("li",{parentName:"ul"},"int and Integer"),(0,i.kt)("li",{parentName:"ul"},"Enum"),(0,i.kt)("li",{parentName:"ul"},"String (Java 10)"),(0,i.kt)("li",{parentName:"ul"},"var (If resolved type is before elements)")),(0,i.kt)("h3",{id:"default"},"Default"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\nint value = 3;\nswitch (value) {\n    default:\n        System.out.println("0000");\n        break;\n    case 1:\n        System.out.println("1111");\n        break;\n    case 1 + 2: // equals to case 3\n        System.out.println("2222"); // It prints "2222"\n        break;\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\nint value = 10;\nswitch (value) {\n    default:\n        System.out.println("0000"); // It prints "0000"\n        break;\n    case 1:\n        System.out.println("1111");\n        break;\n    case 1 + 2: // equals to case 3\n        System.out.println("2222"); \n        break;\n}\n\n')),(0,i.kt)("h3",{id:"case"},"Case"),(0,i.kt)("p",null,"Case must be enum or final constant value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\nint value = 10;\nfinal int value2 = 20;\nfinal int value3 = getRandomInt();\nswitch (value) {\n    default:\n        System.out.println("0000"); // It prints "0000"\n    case value2:  // Compiles!!\n        System.out.println("1111");\n    case value3:  // Does not compiles!!! \n        System.out.println("2222"); \n}\n\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Final constant value means variable's value known in ",(0,i.kt)("inlineCode",{parentName:"p"},"compile-time"),".")),(0,i.kt)("h3",{id:"promotion"},"Promotion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"\nshort a = 5;\nfinal int foo = 10;\nfinal int bar = 10000000;\n\nswitch(a) {\n    case foo: // COMPILE\n    case bar: // DOES NOT COMPILE! \n}\n")),(0,i.kt)("h2",{id:"for"},"For"),(0,i.kt)("h3",{id:"multiple-statement"},"Multiple Statement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"var x = 0;\nfor (int k = 0, l = 20; k < 10 && x < 5; k++, x = x + 1) {\n    // Compiles\n}\n")),(0,i.kt)("h3",{id:"infinite-loop"},"Infinite Loop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"for(;;) {\n\n}\n")),(0,i.kt)("h2",{id:"foreach"},"ForEach"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'var value = new String[]{"A", "A", "A"};\nfor(String a: value) {\n    System.out.println(a); // Output is "A\\nA\\nA\\n"\n}\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The right side of ",(0,i.kt)("inlineCode",{parentName:"p"},"ForEach")," must be:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Java Array"),(0,i.kt)("li",{parentName:"ul"},"Implements ",(0,i.kt)("inlineCode",{parentName:"li"},"java.lang.Iterable")))),(0,i.kt)("h2",{id:"do-while"},"Do-While"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Do-While first runs ",(0,i.kt)("inlineCode",{parentName:"p"},"do block")," and then checks ",(0,i.kt)("inlineCode",{parentName:"p"},"while statement"),". You may fail when ",(0,i.kt)("inlineCode",{parentName:"p"},"nested loop")," code blocks.")),(0,i.kt)("h2",{id:"optional-labels"},"Optional Labels"),(0,i.kt)("p",null,"You can give optional name to any code block. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"\nint value = 10;\nBOOLEAN_CHECK: if (value < 10)  // Compiles :)\nBOOLEAN_CHECK_BODY: { // Compiles :) :) :) :)\n    value = -1;\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    public static void main(String[] args) {\n        System.out.println("public static void main prints: ");\n        FIRST_LOOP: for (int k=0; k<5; k++) {\n            SECOND_LOOP: for (int j=0; j<5; j++) {\n                System.out.println(k + ", " + j);\n                if (k == 0) {\n                    System.out.println("continue SECOND_LOOP");\n                    break SECOND_LOOP;\n                }\n                if (k == 1) {\n                    System.out.println("break FIRST_LOOP");\n                    break FIRST_LOOP;\n                }\n            }\n        }\n    }\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"public static void main prints: \n0, 0\ncontinue SECOND_LOOP\n1, 0\nbreak FIRST_LOOP\n")),(0,i.kt)("h2",{id:"unreachable-statement-1"},"Unreachable Statement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'if (value) {\n    return;\n    System.out.println("AAAA"); // DOES NOT COMPILE BECAUSE IT IS UNREACABLE!\n}\n')),(0,i.kt)("h2",{id:"focus"},"Focus!"),(0,i.kt)("h3",{id:"nested-if-statement-without-block"},"Nested If Statement without block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'        if (true)\n            if (false)\n                System.out.println("Doesn\'t print this one");\n            else\n                System.out.println("Prints this one");\n        else\n            System.out.println("Doesn\'t print this one");\n')),(0,i.kt)("h3",{id:"warning"},"Warning"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Not every ",(0,i.kt)("inlineCode",{parentName:"p"},"Java Collection")," class implements ",(0,i.kt)("inlineCode",{parentName:"p"}," java.lang.Iterable"),".")),(0,i.kt)("h3",{id:"switch-case-condition"},"Switch Case Condition"),(0,i.kt)("p",null,"Case must be ",(0,i.kt)("inlineCode",{parentName:"p"},"compiled-time constant"),". So ",(0,i.kt)("inlineCode",{parentName:"p"},"efective final")," can't be in case statement."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int foo = 10;\nfinal int bar = 20;\nswitch(value) {\n    case foo: // DOES NOT COMPILE!\n    case bar: // COMPILE\n}\n")),(0,i.kt)("h3",{id:"multiple-initilize"},"Multiple Initilize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"final int foo = 5, bar = 10;\nbar = 20; // DOES NOT COMPILE! bar is final int!\n")),(0,i.kt)("h3",{id:"warning-1"},"Warning"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"for (int k=0; k<value.size(); k++)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"for (int k=0; k<value.size(); ++k)")," same thing. Behavior don't change!.")),(0,i.kt)("h3",{id:"assignment-operations-return-value-in-while"},"Assignment Operations Return Value in ",(0,i.kt)("inlineCode",{parentName:"h3"},"while")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'var value = 1;\nwhile((value = value + 1) < 5) {\n    System.out.print(value);\n} // Output is "234"\n')),(0,i.kt)("h3",{id:"while-statement-cant-reach-while-bodys-value"},"While Statement can't Reach While Body's value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"do {\n    int value = 10;\n} while (value > 20); // DOES NOT COMPILE!\n")),(0,i.kt)("h3",{id:"optional-label-cant-use-outside-of-declerated-label-block"},"Optional Label can't use outside of declerated label block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"var value = true;\nONE: for(;;)\n    if (value) {\n        break TWO; // DOES NOT COMPILE! BECAUSE OF break TWO!!\n    }\n    TWO: for(;;) {\n\n    }\n")),(0,i.kt)("h3",{id:"assignment-operations-return-value-in-if"},"Assignment Operations Return Value in ",(0,i.kt)("inlineCode",{parentName:"h3"},"if")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"var value = false;\nif (value = true) {\n    // Enters this statement!\n} \n")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"if (value = true)")," works like ",(0,i.kt)("inlineCode",{parentName:"p"},"if (true)"),".")))}c.isMDXComponent=!0}}]);