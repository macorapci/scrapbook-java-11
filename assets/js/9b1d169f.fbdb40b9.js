"use strict";(self.webpackChunkscrapbook_java_11=self.webpackChunkscrapbook_java_11||[]).push([[9569],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),u=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},p=function(t){var e=u(t.components);return a.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),m=u(n),g=r,c=m["".concat(s,".").concat(g)]||m[g]||d[g]||i;return n?a.createElement(c,l(l({ref:e},p),{},{components:n})):a.createElement(c,l({ref:e},p))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4746:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={id:"chapter-005-id",title:"Chapter 5"},l=void 0,o={unversionedId:"notes/chapter-005-id",id:"notes/chapter-005-id",title:"Chapter 5",description:"String",source:"@site/docs/notes/notes-chapter-005.md",sourceDirName:"notes",slug:"/notes/chapter-005-id",permalink:"/scrapbook-java-11/docs/notes/chapter-005-id",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/notes/notes-chapter-005.md",tags:[],version:"current",frontMatter:{id:"chapter-005-id",title:"Chapter 5"},sidebar:"java11",previous:{title:"Chapter 4",permalink:"/scrapbook-java-11/docs/notes/chapter-004-id"}},s={},u=[{value:"String",id:"string",level:2},{value:"String is immutable!",id:"string-is-immutable",level:3},{value:"String Methods",id:"string-methods",level:3},{value:"indexOf",id:"indexof",level:4},{value:"substring",id:"substring",level:4},{value:"equalsIgnoreCase",id:"equalsignorecase",level:4},{value:"startsWith and endWith",id:"startswith-and-endwith",level:4},{value:"intern",id:"intern",level:4},{value:"strip",id:"strip",level:4},{value:"stripLeading",id:"stripleading",level:4},{value:"stripTrailing",id:"striptrailing",level:4},{value:"trim",id:"trim",level:4},{value:"StringBuilder",id:"stringbuilder",level:2},{value:"StringBuilder is mutable",id:"stringbuilder-is-mutable",level:3},{value:"StringBuilder Methods",id:"stringbuilder-methods",level:3},{value:"append",id:"append",level:4},{value:"insert",id:"insert",level:4},{value:"delete",id:"delete",level:4},{value:"deleteCharAt",id:"deletecharat",level:4},{value:"replace",id:"replace",level:4},{value:"Caution",id:"caution",level:4},{value:"String Pool",id:"string-pool",level:3},{value:"Array",id:"array",level:2},{value:"Decleration",id:"decleration",level:3},{value:"Multiple Decleration",id:"multiple-decleration",level:3},{value:"Caution",id:"caution-1",level:3},{value:"Sort",id:"sort",level:3},{value:"Search",id:"search",level:3},{value:"Compare",id:"compare",level:3},{value:"compare",id:"compare-1",level:4},{value:"mismatch",id:"mismatch",level:4},{value:"Asymmetric Multidimention Array",id:"asymmetric-multidimention-array",level:3},{value:"ArrayList",id:"arraylist",level:2},{value:"Constructor with Number",id:"constructor-with-number",level:3},{value:"add",id:"add",level:3},{value:"remove",id:"remove",level:3},{value:"contains",id:"contains",level:3},{value:"Equals",id:"equals",level:3},{value:"Other methods",id:"other-methods",level:3},{value:"Convert List To Array",id:"convert-list-to-array",level:3},{value:"Sort",id:"sort-1",level:3},{value:"Math",id:"math",level:2},{value:"Notes",id:"notes",level:2}],p={toc:u};function d(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"string"},"String"),(0,r.kt)("h3",{id:"string-is-immutable"},"String is immutable!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String one = "1";\nString two = one.concat("2");\ntwo.concat("3");\nSystem.out.println(two); \n// Outputs "12"\n')),(0,r.kt)("h3",{id:"string-methods"},"String Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Return Value"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Method Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"param1"),(0,r.kt)("th",{parentName:"tr",align:"center"},"param2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"int"),(0,r.kt)("td",{parentName:"tr",align:"center"},"indexOf"),(0,r.kt)("td",{parentName:"tr",align:"center"},"int ch"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"int"),(0,r.kt)("td",{parentName:"tr",align:"center"},"indexOf"),(0,r.kt)("td",{parentName:"tr",align:"center"},"String str"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"int"),(0,r.kt)("td",{parentName:"tr",align:"center"},"indexOf"),(0,r.kt)("td",{parentName:"tr",align:"center"},"int ch"),(0,r.kt)("td",{parentName:"tr",align:"center"},"int fromIndex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"int"),(0,r.kt)("td",{parentName:"tr",align:"center"},"indexOf"),(0,r.kt)("td",{parentName:"tr",align:"center"},"String str"),(0,r.kt)("td",{parentName:"tr",align:"center"},"int fromIndex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"String"),(0,r.kt)("td",{parentName:"tr",align:"center"},"substring"),(0,r.kt)("td",{parentName:"tr",align:"center"},"int beginIndex"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"String"),(0,r.kt)("td",{parentName:"tr",align:"center"},"substring"),(0,r.kt)("td",{parentName:"tr",align:"center"},"int beginIndex"),(0,r.kt)("td",{parentName:"tr",align:"center"},"int endIndex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"center"},"equalsIgnoreCase"),(0,r.kt)("td",{parentName:"tr",align:"center"},"String str"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"center"},"startsWith"),(0,r.kt)("td",{parentName:"tr",align:"center"},"String prefix"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"center"},"endsWith"),(0,r.kt)("td",{parentName:"tr",align:"center"},"String suffix"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"String"),(0,r.kt)("td",{parentName:"tr",align:"center"},"strip"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"String"),(0,r.kt)("td",{parentName:"tr",align:"center"},"stripLeading"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"String"),(0,r.kt)("td",{parentName:"tr",align:"center"},"stripTrailing"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"String"),(0,r.kt)("td",{parentName:"tr",align:"center"},"trim"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"String"),(0,r.kt)("td",{parentName:"tr",align:"center"},"intern"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-")))),(0,r.kt)("h4",{id:"indexof"},"indexOf"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"char")," values sended as ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),". You can set begining searching index with ",(0,r.kt)("inlineCode",{parentName:"p"},"int fromIndex"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String one = "ABCDABCDEFGH";\nSystem.out.println(one.indexOf("A", 3)); \n// Output is "4"\nSystem.out.println(one.indexOf("CD")); \n// Output is "2"\nSystem.out.println(one.indexOf("CD", 3)); \n// Output is "6"\nSystem.out.println(one.indexOf("CD", 7)); \n// Output is "-1"\n')),(0,r.kt)("h4",{id:"substring"},"substring"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String one = "012345";\nSystem.out.println(one.substring(3, 4)); \n// Output is "3"\nSystem.out.println(one.substring(3, 3)); \n// Output is ""\nSystem.out.println(one.substring(3, 2)); \n// Throws Exception\nSystem.out.println(one.substring(3, 6)); \n// Output is "345"\nSystem.out.println(one.substring(3, 7)); \n// Throws Exception\n')),(0,r.kt)("h4",{id:"equalsignorecase"},"equalsIgnoreCase"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'System.out.println("abc".equals("ABC"));  \n// Output is "false"\nSystem.out.println("abc".equalsIgnoreCase("ABC"));  \n// Output is "true"\n')),(0,r.kt)("h4",{id:"startswith-and-endwith"},"startsWith and endWith"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'System.out.println("abc".startsWith("a")); \n// Output is "true"\nSystem.out.println("abc".endsWith("c")); \n// Output is "true"\n')),(0,r.kt)("h4",{id:"intern"},"intern"),(0,r.kt)("p",null,"Adds string to ",(0,r.kt)("inlineCode",{parentName:"p"},"String Pool"),"."),(0,r.kt)("h4",{id:"strip"},"strip"),(0,r.kt)("p",null,"Returns a string whose value is this string, with all leading and trailing white space removed."),(0,r.kt)("h4",{id:"stripleading"},"stripLeading"),(0,r.kt)("p",null,"Returns a string whose value is this string, with all leading white space removed."),(0,r.kt)("h4",{id:"striptrailing"},"stripTrailing"),(0,r.kt)("p",null,"Returns a string whose value is this string, with all trailing white space removed."),(0,r.kt)("h4",{id:"trim"},"trim"),(0,r.kt)("p",null,"Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character)."),(0,r.kt)("h2",{id:"stringbuilder"},"StringBuilder"),(0,r.kt)("h3",{id:"stringbuilder-is-mutable"},"StringBuilder is mutable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'StringBuilder one = new StringBuilder("1");\none.append("2");\nStringBuilder two = one.append("3");\nSystem.out.println(one); \n// Outputs "123"\nSystem.out.println(one == two); \n// Outputs "true"\n')),(0,r.kt)("h3",{id:"stringbuilder-methods"},"StringBuilder Methods"),(0,r.kt)("p",null,"These methods are just work like ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"charAt"),(0,r.kt)("li",{parentName:"ul"},"indexOf"),(0,r.kt)("li",{parentName:"ul"},"length"),(0,r.kt)("li",{parentName:"ul"},"substring")),(0,r.kt)("h4",{id:"append"},"append"),(0,r.kt)("p",null,"Adds given String to StringBuilder's state."),(0,r.kt)("h4",{id:"insert"},"insert"),(0,r.kt)("p",null,"Adds given ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," to StringBuilder's state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"StringBuilder insert(int offset, String str)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"StringBuilder one = new StringBuilder(\"012345\");\none.insert(6, '-');\none.insert(0, '-');\nSystem.out.println(one.toString()); \n// Output is \"-012345-\"\n")),(0,r.kt)("h4",{id:"delete"},"delete"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"StringBuilder delete(int startIndex, int endIndex)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'StringBuilder one = new StringBuilder("012345");\none.delete(1, 3);\nSystem.out.println(one.toString()); \n// Output is "0345"\none.delete(1, 10000);\nSystem.out.println(one.toString()); \n// Output is "0". Delete does not throw exception when endIndex passes lenght.\n')),(0,r.kt)("h4",{id:"deletecharat"},"deleteCharAt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"StringBuilder deleteCharAt(int index)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'StringBuilder one = new StringBuilder("012345");\none.deleteCharAt(5);\nSystem.out.println(one.toString()); \n// Output is "01234"\none.deleteCharAt(5);\n// Throws Exception\n')),(0,r.kt)("h4",{id:"replace"},"replace"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Works different than ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"StringBuilder replace(int startIndex, int endIndex, String newString)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'StringBuilder one = new StringBuilder("012345");\none.replace(1, 6, "12");\nSystem.out.println(one.toString()); \n// Output is "012"\none.replace(1, 10000, "");\nSystem.out.println(one.toString());\n// Output is "0"\n')),(0,r.kt)("h4",{id:"caution"},"Caution"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"StringBuilder does not implements `equals`. \n"))),(0,r.kt)("h3",{id:"string-pool"},"String Pool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String one = "one" + "1";\nString two = "o" + "n" + "e" + "1";\nString three = "o" + "n" + "e" + new String("1");\nSystem.out.println(one == two);\n// Output is "true"\nSystem.out.println(one == three);\n// Output is "false"\nSystem.out.println(one == three.intern());\n// Output is "true"\n')),(0,r.kt)("h2",{id:"array"},"Array"),(0,r.kt)("h3",{id:"decleration"},"Decleration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int[] one;\nint [] two;\nint []three;\nint four[];\nint five [];\n\n// All of these are valid and behavior is same.\n")),(0,r.kt)("h3",{id:"multiple-decleration"},"Multiple Decleration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int[] one, two, three[]; \n// one  : int[] \n// two  : int[]\n// three: int[][] !!!!!!\n")),(0,r.kt)("h3",{id:"caution-1"},"Caution"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"int")," is primive. ",(0,r.kt)("inlineCode",{parentName:"p"},"int[]")," is object. ")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[] value = {"1", "2," "3", "4", "5"};\nSystem.out.println(value);\n// Output starts with "[Ljava.lang.String"\n\n// import java.util.Arrays;\nSystem.out.println(Arrays.toString(value));\n// Output is ["1", "2", "3", "4", "5"]\n'))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[] value = {"1", "2,", "3", "4", "5"};\nObject[] objects = value;\nobjects[0] = new StringBuilder("aa");\n// Throws exception. (Exception in thread "main" java.lang.ArrayStoreException: java.lang.StringBuilder)\n'))),(0,r.kt)("h3",{id:"sort"},"Sort"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int[] numbers = { 60, 9, 1 };\n\n// import java.util.Arrays;\nArrays.sort(numbers);\nString output = Arrays.toString(numbers);\nSystem.out.println(output);\n// Output is [1, 9, 60]\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},'String sorting rule is "Numbers sort before letters, uppercase sorts before lowercase and lowercase sort before ',(0,r.kt)("inlineCode",{parentName:"p"},"null"),'".')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[] values = {"9", "10", "1"};\n\n// import java.util.Arrays;\nArrays.sort(values);\nString output = Arrays.toString(values);\nSystem.out.println(output);\n// Output is [1, 10, 9]!!! \n')),(0,r.kt)("h3",{id:"search"},"Search"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'int[] values = {2, 7, 9};\n\n// import java.util.Arrays;\nint index1 = Arrays.binarySearch(values, 2);\nSystem.out.println(index1);\n// Output is "0"\n\n// import java.util.Arrays;\nint index2 = Arrays.binarySearch(values, 9);\nSystem.out.println(index2);\n// Output is "2"\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},'If searched element not on the list, then returns "minus of element should be in list" minus "one".'),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\n\nint[] values = {2, 7, 9};\nint index1 = Arrays.binarySearch(values, 0);\nSystem.out.println(index1);\n// Output is "-1". -(0)-1\nint index2 = Arrays.binarySearch(values, 5);\nSystem.out.println(index2);\n// Output is "-2". -(1)-1\nint index3 = Arrays.binarySearch(values, 36);\nSystem.out.println(index3);\n// Output is "-4". -(3)-1\n'))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If array is not sorted then ",(0,r.kt)("inlineCode",{parentName:"p"},"Arrays.binarySearch")," won't work right!")),(0,r.kt)("h3",{id:"compare"},"Compare"),(0,r.kt)("h4",{id:"compare-1"},"compare"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If first element that differs is larger in ",(0,r.kt)("inlineCode",{parentName:"li"},"first array")," , return ",(0,r.kt)("inlineCode",{parentName:"li"},"positive number"),". ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\n\nSystem.out.println(Arrays.compare(\n        new int[]{5, 7, 9},\n        new int[]{2, 7, 9, 0, 2})\n);\n// Output is "1"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If same length and same values, returns ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\nSystem.out.println(Arrays.compare(\n        new int[]{2, 7, 9},\n        new int[]{2, 7, 9})\n);\n// Output is "0"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If exist all values equal but first array size bigger, returns ",(0,r.kt)("inlineCode",{parentName:"li"},"positive number"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\n\nSystem.out.println(Arrays.compare(\n        new int[]{2, 7, 9, 0},\n        new int[]{2, 7, 9})\n);\n// Output is "1"\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\n\nSystem.out.println(Arrays.compare(\n        new int[] {1},\n        new String[] {"a"})\n);\n// Does not compile!!!\n'))),(0,r.kt)("h4",{id:"mismatch"},"mismatch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If two array is equal, returns ",(0,r.kt)("inlineCode",{parentName:"li"},"-1"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\n\nSystem.out.println(Arrays.mismatch(\n        new int[]{2, 7, 9},\n        new int[]{2, 7, 9})\n);\n// Output is "-1"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Otherwise returns first differ index.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\n\nSystem.out.println(Arrays.mismatch(\n        new int[]{6, 7},\n        new int[]{2, 7, 9})\n);\n// Output is "0"\n\nSystem.out.println(Arrays.mismatch(\n        new int[]{2, 7},\n        new int[]{2, 7, 9})\n);\n// Output is "2"\n')),(0,r.kt)("h3",{id:"asymmetric-multidimention-array"},"Asymmetric Multidimention Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.Arrays;\n\nint[][] values = {\n    {1},\n    {1, 2}\n};\nSystem.out.println(Arrays.toString(values));\n//Output is "[[I@5674cd4d, [I@63961c42]"\nSystem.out.println(Arrays.deepToString(values));\n//Output is "[[1], [1, 2]]"\n\nint [][] values2 = new int[3][];\nvalues2[0] = new int[2];\nvalues2[1] = new int[3];\nSystem.out.println(Arrays.deepToString(values2));\n//Output is "[[0, 0], [0, 0, 0], null]"\n')),(0,r.kt)("h2",{id:"arraylist"},"ArrayList"),(0,r.kt)("h3",{id:"constructor-with-number"},"Constructor with Number"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(1);\nSystem.out.println(value.size() + ", " + value);\n// Output is "0, []"\nvalue.add("AAAA");\nvalue.add("BBBB");\nSystem.out.println(value.size() + ", " + value);\n// Output is "2, [AAAA, BBBB]"\n')),(0,r.kt)("h3",{id:"add"},"add"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(1);\nvalue.add("AAAA");\nvalue.add(0, "BBBB");\nvalue.add(1, "CCCC");\nSystem.out.println(value.size() + ", " + value);\n// Output is "3, [BBBB, CCCC, AAAA]"\n')),(0,r.kt)("h3",{id:"remove"},"remove"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(1);\nvalue.add("AAAA");\nvalue.add(0, "BBBB");\nvalue.add(1, "CCCC");\nSystem.out.println(value.size() + ", " + value);\n// Output is "3, [BBBB, CCCC, AAAA]"\nvalue.remove(2);\nSystem.out.println(value.size() + ", " + value);\n// Output is "2, [BBBB, CCCC]"\nvalue.remove("BBBB");\nSystem.out.println(value.size() + ", " + value);\n// Output is "1, [CCCC]"\nvalue.remove("DDDDDD");\n// Does don\'t anything!\nSystem.out.println(value.size() + ", " + value);\n// Output is "1, [CCCC]"\nvalue.remove(10);\n// Throws "Exception in thread "main" java.lang.IndexOutOfBoundsException: Index 10 out of bounds for length 1"\n')),(0,r.kt)("h3",{id:"contains"},"contains"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"boolean contains(Object object)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(1);\nvalue.add("AAAA");\nvalue.add(0, "BBBB");\nvalue.add(1, "CCCC");\nSystem.out.println(value.contains("AAAA"));\n// Output is "true"\n')),(0,r.kt)("h3",{id:"equals"},"Equals"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"ArrayList override ",(0,r.kt)("inlineCode",{parentName:"p"},"equals"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(1);\nvalue.add("AAAA");\nvar value2 = new ArrayList<String>();\nSystem.out.println(value.equals(value2));\n// Output is "false"\nvalue2.add("AAAA");\nSystem.out.println(value.equals(value2));\n// Output is "true"\n')),(0,r.kt)("h3",{id:"other-methods"},"Other methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"E set(int index, E newElement)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"void clear()\n")),(0,r.kt)("h3",{id:"convert-list-to-array"},"Convert List To Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(1);\nvalue.add("AAAA");\nObject[] objects = value.toArray();\nString[] strings = value.toArray(new String[0]);\nvalue.add("BBBB");\nSystem.out.println(value);\n// Output is "[AAAA, BBBB]"\nSystem.out.println(java.util.Arrays.toString(strings));\n// Output is "[AAAA]"\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If sended array size enought for List size then toArray fills that array."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(1);\nvalue.add("AAAA");\nString[] sentArray = new String[3];\nString[] result = value.toArray(sentArray);\nSystem.out.println(sentArray == result);\n// Output is "true"\nSystem.out.println(java.util.Arrays.toString(sentArray));\n// Output is "[AAAA, null, null]"\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'var array = new String[] {"1", "2", "3"};\nList<String> list = java.util.Arrays.asList(array);\nSystem.out.println(list);\n// Output is "[1, 2, 3]"\nlist.set(0, "0");\nSystem.out.println(list);\n// Output is "[0, 2, 3]"\nSystem.out.println(java.util.Arrays.toString(array));\n// Output is "[0, 2, 3]". array is changed!!!\nlist.remove(0);\n// Throws "Exception in thread "main" java.lang.UnsupportedOperationException"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'var array = new String[] {"1", "2", "3"};\nList<String> list = List.of(array);\nSystem.out.println(list);\n// Output is "[1, 2, 3]"\nlist.set(0, "0");\n// Throws "Exception in thread "main" java.lang.UnsupportedOperationException"\n')),(0,r.kt)("h3",{id:"sort-1"},"Sort"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// import java.util.List;\n// import import java.util.ArrayList;\nList<String> value = new ArrayList<>(3);\nvalue.add("BBBB");\nvalue.add("CCCC");\nvalue.add("AAAA");\nSystem.out.println(value);\n// Output is "[BBBB, CCCC, AAAA]"\njava.util.Collections.sort(value);\nSystem.out.println(value);\n// Output is "[AAAA, BBBB, CCCC]"\n')),(0,r.kt)("h2",{id:"math"},"Math"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"double min(double a, double b)\nfloat min(float a, float b)\nint min(int a, int b)\nlong min(long a, long b)\nlong round(double num)\nint round(float num)\ndouble pow(double number, double exponent)\ndouble random()\n")),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Memorize ",(0,r.kt)("inlineCode",{parentName:"p"},"TABLE 5.6 Array and list conversions"),".")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'new String("aaa") == new StringBuilder("aaa");\n// Does not Compile!\n'))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'var value = "aaa".equals(new StringBuilder("aaa"));\nSystem.out.println(value);\n// Output is "false"\n'))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'new String("aaaa").length\n// Does not compile! .length()\n'))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String a = "AAAA";\na += "BBB";\nSystem.out.println(a);\n// Output is "AAAA". Strings are IMMUTABLE!\n'))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"delete(int, int)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"insert(int, String)")," are methods of ",(0,r.kt)("inlineCode",{parentName:"p"},"StringBuilder"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'var builder = new StringBuilder("012345");\nbuilder.delete(1, 4);\nbuilder.insert(1, "AA");\nSystem.out.println(builder);\n// Output is "0AA45"\nbuilder.deleteCharAt(1);\nSystem.out.println(builder);\n// Output is "0A45"\n'))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"You can create array with zero element size."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"String[] value = new String[0];\n// This is legal!\n"))),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"parseInt")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int parseInt(String s) throws NumberFormatException\n"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"valueOf")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),"."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Integer valueOf(String s) throws NumberFormatException\n"))))}d.isMDXComponent=!0}}]);