"use strict";(self.webpackChunkscrapbook_java_11=self.webpackChunkscrapbook_java_11||[]).push([[5306],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(a),d=r,k=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(k,i(i({ref:t},c),{},{components:a})):n.createElement(k,i({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1606:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={id:"chapter-003-id",title:"Chapter 3"},i=void 0,l={unversionedId:"notes/chapter-003-id",id:"notes/chapter-003-id",title:"Chapter 3",description:"Number Assingment",source:"@site/docs/notes/notes-chapter-003.md",sourceDirName:"notes",slug:"/notes/chapter-003-id",permalink:"/scrapbook-java-11/docs/notes/chapter-003-id",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/notes/notes-chapter-003.md",tags:[],version:"current",frontMatter:{id:"chapter-003-id",title:"Chapter 3"},sidebar:"java11",previous:{title:"Chapter 2",permalink:"/scrapbook-java-11/docs/notes/chapter-002-id"}},p={},s=[{value:"Number Assingment",id:"number-assingment",level:2},{value:"Assignment Operations Return Value",id:"assignment-operations-return-value",level:3},{value:"Compairing Values",id:"compairing-values",level:2},{value:"instanceof",id:"instanceof",level:2},{value:"Logical Operator",id:"logical-operator",level:2},{value:"Short-ciruit",id:"short-ciruit",level:3},{value:"Exclusive Or",id:"exclusive-or",level:3},{value:"Ternary Operator",id:"ternary-operator",level:3},{value:"Focus!",id:"focus",level:2},{value:"Assignment",id:"assignment",level:3},{value:"Order of operator",id:"order-of-operator",level:3}],c={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"number-assingment"},"Number Assingment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"float one = 2.1; // Does not compile!\nfloat two = 2.1f; // Compile!\nfloat three = 2f; // Compile!\nint four = 3f; // Does not Compile!\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"byte"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"short"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," promote to int. "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"short a = 1;\nshort b = 2;\nvar value = a + b; // value type is equal to int!\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"long a = 3;\nint b = 4;\na = a * b; // Compile!\nb = a * b; // Does not compile!\nb *= a;    // Compie!\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Compound assignment operations will cast type automaticly.")),(0,r.kt)("h3",{id:"assignment-operations-return-value"},"Assignment Operations Return Value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"long a = 5;\nlong b = (a = 3);\nSystem.out.println(a); // 3\nSystem.out.println(b); // 3\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'boolean value = false;\nif (value = true) {\n    System.out.println("It will print this!");\n}\n// Output is "It will print this!"\n')),(0,r.kt)("h2",{id:"compairing-values"},"Compairing Values"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Java promotes values to upper. ",(0,r.kt)("inlineCode",{parentName:"p"},"5 == 5.0")," will return ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,r.kt)("h2",{id:"instanceof"},"instanceof"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public static void foo(Number foo) {\n    if (foo instanceof String) { // Does not compile. Because Number and String incompatible!\n\n    }\n} \n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"null")," value always return false to instanceof operant."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'        String a = null;\n        if (a instanceof String) { // Returns false!\n            System.out.println("AAAAAA");\n        }\n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"System.out.println(null instanceof null); // Does not compile!\n")),(0,r.kt)("h2",{id:"logical-operator"},"Logical Operator"),(0,r.kt)("h3",{id:"short-ciruit"},"Short-ciruit"),(0,r.kt)("p",null,"& -> &&\n| -> ||"),(0,r.kt)("h3",{id:"exclusive-or"},"Exclusive Or"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"^")," means ",(0,r.kt)("inlineCode",{parentName:"p"},"exclusive or"),". "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"val1"),(0,r.kt)("th",{parentName:"tr",align:"center"},"val2"),(0,r.kt)("th",{parentName:"tr",align:"center"},"val1^val2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"false"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true"),(0,r.kt)("td",{parentName:"tr",align:"center"},"true")))),(0,r.kt)("h3",{id:"ternary-operator"},"Ternary Operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'System.out.println(boolValue ? 5 : "10"); // Compile!\n')),(0,r.kt)("h2",{id:"focus"},"Focus!"),(0,r.kt)("h3",{id:"assignment"},"Assignment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int a = 5;\nlong b = a; // Compile!\ndouble c = a; // Compile!\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'int a = 5;\na = a++; // Compiles!\nb = a++;\nSystem.out.println(a + ", " + b); // Output: 7, 6\n')),(0,r.kt)("h3",{id:"order-of-operator"},"Order of operator"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Operator"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Symbols and examples"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Post-unary operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"expression++, expression--")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Pre-unary operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"++expression, --expression")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Other unary operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"-, !, ~, +, (type)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Multiplication/division/modulus"),(0,r.kt)("td",{parentName:"tr",align:"center"},"*, /, %")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Addition/subtraction"),(0,r.kt)("td",{parentName:"tr",align:"center"},"+, -")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Shift operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<<, >>, >>>")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Relational operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<, >, <=, >=, instanceof")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Equal to/not equal"),(0,r.kt)("td",{parentName:"tr",align:"center"},"==, !=")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Logical operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"&, ^, ","|")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Short-circuit logical operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"&&, ","|","|")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Ternary operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"boolean expression ? expression1 : expression2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Assignment operators"),(0,r.kt)("td",{parentName:"tr",align:"center"},"=, +=, -=, *=, /=, %=, &=, ^=, ","|","=, <<=, >>=, >>>=")))))}m.isMDXComponent=!0}}]);